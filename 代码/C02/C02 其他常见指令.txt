mul 是乘法    mul al,10 可以  如果不指定逗号后的数字，如果是8位的，乘数默认是AL里面的数字，如果是16位的，more乘数是AX中的
div 是除法 参数是除数     被除数默认存放在AX和DX中，如果除数为8位，被除数则为16位，默认在AX中存放。如果除数为16位，则被除数为32位，此时DX存放高16位，AX存放低16位，结果如果除数是8位，则AL存储除法操作的商，AH存储出除法操作的余数，如果除数为16位，则AX存储除法操作的商，DX存储除法操作的余数
and 二进制按每一位进行与操作
or   二进制按每一位进行或操作
shl 是左移二进制位 最后移出的数据向左移动 最低位用0补充 将最后一位写入CF中
shr 是右移二进制位 最后移出的数据向左移动 最低位用0补充 将最后一位写入CF中
rol 是循环左移 就是舍掉的左位存在最右侧
ror 是循环右移
nop 是空指令 就是啥也不干 正好在内存单元中占一个字节 可以当作空的代码段 为了后面有个指令将前面代码转移到空的代码段中
rcl 带进位的循环左移
rcr 带进位的循环右移
inc 增加1
dec 减少1
xchg 就是交换两个寄存器中的值
neg 是取反（取相反数 就是5变成-5） （就是二进制位取反再加一）
除了加减乘除还能读取时间信息、读取端口
比较常用的是指针转换：如果我想mov ax,al 是不行的 必须进行指针转换 就是写mov ax,word ptr [0] 强行把内存中的一个字节转换成一个字之后存进去 或者使用MOVZX
注意从寄存器中mov的时候汇编器会根据目标寄存器的大小进行推断
int 是中断（CS:IP跳到中断向量表中指定的位置）：在8086 CPU中，中断向量表（Interrupt Vector Table, IVT）位于内存的最低1KB区域，即从地址 0000:0000 到 0000:03FF。每个中断向量占用4个字节，其中前2个字节存储中断处理程序的偏移地址，后2个字节存储段地址。
当发生中断时，CPU会根据中断类型从中断向量表中读取对应的中断处理程序地址，并将其加载到 CS 和 IP 寄存器中。例如，对于 INT 0 中断，CPU会从内存地址 0000:0000 处读取偏移地址，并从内存地址 0000:0002 处读取段地址，然后跳转到该地址执行中断处理程序。
int 0是除法中断 
在8086 CPU中，除了 INT 0 之外，还有许多其他中断，每个中断都有其特定的中断向量。中断向量表（Interrupt Vector Table, IVT）位于内存的最低1KB区域（从地址 0000:0000 到 0000:03FF），每个中断向量占用4个字节（2个字节的段地址和2个字节的偏移地址）。
int 0是除法中断
一些常见的中断包括：
INT 1：单步中断，用于调试。
INT 2：非屏蔽中断（NMI），通常用于紧急情况。
INT 3：断点中断，用于调试。
INT 4：溢出中断，当 INTO 指令检测到溢出时触发。
INT 5：边界检查中断，当 BOUND 指令检测到数组边界错误时触发。
每个中断都有其特定的中断向量，并且它们在中断向量表中的位置是固定的。例如，INT 0 的中断向量位于内存地址 0000:0000 到 0000:0003，而 INT 1 的中断向量位于内存地址 0000:0004 到 0000:0007。
一般退出程序这么写： MOV AX, 4C00H ; 将退出代码放入AX寄存器 INT 21H ; 调用DOS中断21H以退出程序
