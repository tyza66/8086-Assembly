除了以前学到的寄存器以外还有一种寄存器叫做标志寄存器
标志寄存器用来存储相关指令的某些执行结果，用来为CPU执行相关指令提供行为依据，用来控制CPU的相关工作方式
标志寄存器与其他寄存器不一样，其他寄存器是用来存放数据的，都是整个寄存器具有一个含义。而flag寄存器是按位起作用的，也就是说，它的每一位都有专门的含义，记录特定的信息

OF（溢出标志位）：表示有符号运算结果是否溢出。如果溢出，OF 置位（OV），否则清零（NV）。
CF（进位标志位）：表示无符号运算结果是否产生进位或借位。如果有进位或借位，CF 置位（CY），否则清零（NC）。 进位的位一般会被舍弃
AF（辅助进位标志位）：用于BCD（十进制）运算，表示低4位运算是否产生进位。如果有进位，AF 置位（AC），否则清零（NA）。
ZF（零标志位）：表示运算结果是否为零。如果结果为零，ZF 置位（ZR），否则清零（NZ）。
PF（奇偶标志位）：表示运算结果的所有位中1的个数是否为偶数。如果是偶数，PF 置位（PE），否则清零（PO）。
SF（符号标志位）：表示运算结果的符号。如果结果为负数，SF 置位（NG），否则清零（PL）。
TF（陷阱标志位）：用于单步调试。如果置位，CPU在执行每条指令后会产生一个单步中断。
IF（中断标志位）：控制中断的使能。如果置位，CPU允许中断请求；如果清零，CPU忽略中断请求。
DF是方向标志 用于串的处理 DF=1时每次操作后使SI和DI减小，DF=0时则增大

溢出就是结果超过了可表示范围
进位和溢出的区别在于 进位标志位即使表示成一个无符号数它都已经超过了范围，比如98+98得到的是三个十六进制位 溢出的重点不在于它超没超过范围而在于出现了错误像98+99=-59这种错误的出现

adc 是加法的一种变种，如果进位标志位是1的话运算结果会多+1 （相当于先加法之后再加上进位标志位的值）好处是可以跨位进行进位，换句话说就是以前进位的位会丢弃，但是现在可以通过标志位找到是否进位，按需要进位到需要的地方（进位是二进制进位，不是十六进制进位）

sbb 是借位减法 如果进位标志位是1的话运算结果会多-1 

cmp 比较指令 相当于一个减法操作但是不保留结果 但是这样如果相等会导致0的标志位为1，没有负号，1的数量为0，没有进位，没有溢出 ，通过标志位综合来看就能判断出两个相比较的数之间的大小关系
cmp ah,bh
如果溢出且结果为负数 那逻辑上真正的结果必为正 ax>bx
如果溢出并且结为正数 那逻辑上真正的结果必为负 ax<bx

这里还有一些jump的变种
je	equal		等于则跳转		zf=1
jne	not equal	不等于则跳转		zf=0
jb	below		低于则跳转		cf=1
jnb	not below	不低于则跳转		cf=0
ja	above		高于则跳转		cf=0且zf=0
jna	not aboove	不高于则跳转		cf=1或zf=1